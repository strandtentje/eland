{
	viewchallenge = Translation(f"templates-%s/challengeitem.html", locales = ["nl", "en"]);

	instances = {
		enteredlist = DataReader(f"queries/GetEnteredChallenges.sql", connection = "stortneer") {
			iterator->Return("entereditem") {
				default->Translation(f"templates-%s/stagebutton.html", locales = ["nl", "en"]) {
					challenge->viewchallenge;
				};
			};
		};

		admin = HttpMethod() {
			get->Translation(f"templates-%s/challengelist.html", locales = ["nl", "en"]) {
				entered->instances.enteredlist;
				staged->DataReader(f"queries/GetStagedChallenges.sql", connection = "stortneer") {
					iterator->Translation(f"templates-%s/enterbutton.html", locales = ["nl", "en"]) {
						challenge->viewchallenge;
					};
				};
				stagables-><f"../wiki/view.conf@barelist">() {
					overridecreate->StubService();
					listitem->Translation(f"templates-%s/stagableitem.html", locales = ["nl", "en"]);
				};
			};
			post->Dir() {
				default->Check() {
					subject->WwwForm(fieldlist = ["id"]) {
						id->NumberField(required = true) {
							failure->FailCheck();
							successful->StubService();
						};
						mapped->CheckCheck() {
							successful->Dir() {
								enter->DataWriter(f"queries/EnterChallenge.sql", connection = "stortneer") {
									changed_1->DataReader(f"queries/GetChallenge.sql", connection = "stortneer") {
										single-><f"../perm/groupgrant.conf@add">(
											groupname = "user", resource = "wiki",
											action = "read", reassignments = {
												subresource = "name" });
									};
								};
								unenter->DataWriter(f"queries/UnenterChallenge.sql", connection = "stortneer") {
									changed_1->DataReader(f"queries/GetChallenge.sql", connection = "stortneer") {
										single-><f"../perm/groupgrant.conf@remove">(
											groupname = "user", resource = "wiki",
											action = "read", reassignments = {
												subresource = "name" });
									};
								};
								purge->DataReader(f"queries/GetChallenge.sql", connection = "stortneer") {
									single-><f"../perm/groupgrant.conf@remove">(
										groupname = "user", resource = "wiki",
										action = "read", reassignments = {
											subresource = "name" });
								} & DataWriter(f"queries/PurgeChallenge.sql", connection = "stortneer") {
									changed_1->Translation(f"templates-%s/saved.html", locales = ["nl", "en"]);
								};
							};
						};
					};
				};
				stage->Check() {
					subject->WwwForm(fieldlist = ["name", "title", "multiplier"]) {
						name->NameField(required = true) {
							failure->Write("[missing url]") & FailCheck();
							successful->StubService();
						};
						title->NameField(required = true) {
							failure->Write("[missing title]") & FailCheck();
							successful->StubService();
						};
						multiplier->DecimalField(required = true) {
							failure->Write("[missing decimal]") & FailCheck();
							successful->StubService();
						};
						mapped->CheckCheck() {
							successful->DataWriter(f"queries/AddChallenge.sql", connection = "stortneer") {
								changed_1->Translation(f"templates-%s/saved.html", locales = ["nl", "en"]);
							};
						};
					};
				};
			};
		};
	};
}
