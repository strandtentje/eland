{
	#include f"systememailaddresses.conf"

	saveattribute = DataReader(f"queries/GetPersonAttributeByNamevalue.sql", connection = "stortneer") {
		none->DataWriter(f"queries/AddPersonAttribute.sql", connection = "stortneer") {
			changed_0->Translation(f"templates-%s/attributenotsaved.html", locales = ["en", "nl"]);
			default->Translation(f"templates-%s/attributesaved.html", locales = ["en", "nl"]);
		};
		single->Translation(f"templates-%s/attributeunchanged.html", locales = ["en", "nl"]);
	};

	successful = Translation(f"templates-%s/successful.html", locales = ["en", "nl"]) {
		state->saveattribute;
		field-><f"view.conf@field">;
	};

	failure = FailCheck() & Translation(f"templates-%s/failure.html", locales = ["en", "nl"]) {
		state-><f"texts/errors.conf">(branchvariable = "name");
		field-><f"view.conf@field">;
	};

	instances = {
		updatepersonattribute = saveattribute;

		loginperson = DataReader(f"queries/GetLoginPerson.sql", connection = "stortneer") {
			none->DataReader(f"queries/AddLoginPerson.sql", connection = "stortneer") {
				single->Return("person");
			};
			single->Return("person");
		};

		optionalfield = TextField(pattern = "^.{0,100}$") {
			successful->successful; failure->failure;
		};

		namefield = NameField(required = true) {
			successful->successful;	failure->failure;
		};

		phonefield = TextField(required = true, pattern = "^.{5,18}$") {
			successful->successful; failure->failure;
		};

		emailfield = EmailField(required = true) {
			successful->successful; failure->failure;
		};

		validate = DataWriter(f"queries/SetPersonValid.sql", connection = "stortneer") {
			changed_1->DataReader(f"queries/GetPersonEmail.sql", connection = "stortneer") {
				single->Log("Person e-mail gotten, dispatching mail...") & SendMail(
					bodyname = "toparticipant",
					from = systememailaddresses.noreply,
					subject = "Registered for Crash and Compile",
					#include f"../mailto.credentials"
				) {
					body->Translation(f"templates-%s/participantmail.txt", locales = ["en", "nl"]) {
						attributes->DataReader(f"queries/GetPersonAttributes.sql", connection = "stortneer") {
							iterator->Translation(f"templates-%s/personattribute.txt", locales = ["en", "nl"]);
						};
					};
					sending->Translation(f"templates-%s/sendingmail.html", locales = ["en", "nl"]);
					sent->Log("Sent mail to person") & SendMail(
						bodyname = "toadmin",
						from = systememailaddresses.noreply,
						to = systememailaddresses.admin,
						subject = "New participant at Crash and Compile",
						#include f"../mailto.credentials"
					) {
						body->Translation(f"templates-%s/adminmail.txt", locales = ["en", "nl"]);
						sending->StubService();
						sent->StubService();
					};
				};
			};
		};

		invalidate = DataWriter(f"queries/SetPersonInvalid.sql", connection = "stortneer");
	};
}
