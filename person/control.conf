{
	saveattribute = DataReader(f"queries/GetPersonAttributeByNamevalue.sql", connection = "stortneer") {
		none->DataWriter(f"queries/AddPersonAttribute.sql", connection = "stortneer") {
			changed_0->Template(f"templates/attributenotsaved.html");
			default->Template(f"templates/attributesaved.html");
		};
		single->Template(f"templates/attributeunchanged.html");
	};

	successful = Template(f"templates/successful.html") {
		state->saveattribute;
		field-><f"view.conf@field">;
	};

	failure = FailCheck() & Template(f"templates/failure.html") {
		state-><f"texts/errors.conf">(branchvariable = "name");
		field-><f"view.conf@field">;
	};

	instances = {
		updatepersonattribute = saveattribute;

		loginperson = DataReader(f"queries/GetLoginPerson.sql", connection = "stortneer") {
			none->DataReader(f"queries/AddLoginPerson.sql", connection = "stortneer") {
				single->Return("person");
			};
			single->Return("person");
		};

		optionalfield = TextField(pattern = "^.{0,100}$") {
			successful->successful; failure->failure;
		};

		namefield = NameField(required = true) {
			successful->successful;	failure->failure;
		};

		phonefield = TextField(required = true, pattern = "^.{5,18}$") {
			successful->successful; failure->failure;
		};

		emailfield = EmailField(required = true) {
			successful->successful; failure->failure;
		};

		validate = DataWriter(f"queries/SetPersonValid.sql", connection = "stortneer") {
			changed_1->DataReader(f"queries/GetPersonEmail.sql", connection = "stortneer") {
				single->Log("Person e-mail gotten, dispatching mail...") & SendMail(
					bodyname = "toparticipant",
					from = "noreply@crashandcompile.vetle.uk",
					subject = "Registered for Crash and Compile",
					#include f"../mailto.credentials"
				) {
					body->Template(f"templates/participantmail.txt") {
						attributes->DataReader(f"queries/GetPersonAttributes.sql", connection = "stortneer") {
							iterator->Template(f"templates/personattribute.txt");
						};
					};
					sending->Template(f"templates/sendingmail.html");
					sent->Log("Sent mail to person") & SendMail(
						bodyname = "toadmin",
						from = "noreply@crashandcompile.vetle.uk",
						to = "teh@borreh.nl",
						subject = "New participant at Crash and Compile",
						#include f"../mailto.credentials"
					) {
						body->Template(f"templates/adminmail.txt");
						sending->StubService();
						sent->StubService();
					};
				};
			};
		};

		invalidate = DataWriter(f"queries/SetPersonInvalid.sql", connection = "stortneer");
	};
}